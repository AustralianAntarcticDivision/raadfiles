% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{raadfiles-admin}
\alias{raadfiles-admin}
\alias{get_raad_data_roots}
\alias{get_raad_filenames}
\alias{set_raad_data_roots}
\alias{raad_filedb_path}
\alias{set_raad_filenames}
\alias{run_build_raad_cache}
\title{Raadfiles administration tools}
\usage{
get_raad_data_roots()

get_raad_filenames()

set_raad_data_roots(..., replace_existing = TRUE,
  use_known_candidates = FALSE)

raad_filedb_path(...)

set_raad_filenames(clobber = FALSE)

run_build_raad_cache()
}
\arguments{
\item{...}{input file paths to set}

\item{replace_existing}{replace existing paths, defaults to TRUE}

\item{use_known_candidates}{apply internal logic for known candidates (for internal use at raad-hq), defaults to FALSE}

\item{clobber}{by default do not ignore existing file cache, set to TRUE to ignore and set}
}
\description{
Administration tools for managing a data library.
}
\details{
These management functions are aimed at raadtools users, but can be
used for any file collection. The administration tools consist of **data roots** and
control over the building, reading, and caching of the available file list. No
interpretation of the underlying files is provided in the administration tools.

A typical user won't use these functions but may want to investigate the contents of the raw file list, with
`get_raad_filenames()`.

A user setting up a raadfiles collection will typically set the root directory/directories with `set_raad_data_roots()`,
then run the file cache list builder with `run_build_raad_cache()`, and then `set_raad_filenames()`
to actually load the file cache into memory.

In a new R session there is no need to run `set_raad_filenames()` directly as this
will be done as the package loads. To disable this automatic behaviour use `options(raadfiles.file.cache.disable = TRUE)` *before* the package is
used or loaded. This is typically done when calling `run_build_raad_cache()` in a cron task.

Every raadfiles file collection function (e.g. `oisst_daily_files`) will run `get_raad_filenames` to obtain the full raw list of
available files from the global in-memory option `getOption("raadfiles.filename.database")` and there is a low threshold probability that
this will also trigger a re-read of the file listing from the root directories. To avoid this trigger either use `getOption("raadfiles.filename.database")`
directly to get the in-memory file list, or set `options(raadfiles.file.refresh.threshold = 0)` to prevent the trigger. (Set it to 1 to force it always
to be read, also controlled by `set_raad_filenames(clobber = TRUE)`).

There is a family of functions and global options used for administration.
\tabular{ll}{
 \code{\link{set_raad_data_roots}} \tab set data root paths, default use is to apply the strings input as the exclusive set \cr
 \code{\link{set_raad_filenames}} \tab runs the system to update the file listing and refresh it  \cr
 \code{\link{get_raad_data_roots}} \tab returns the current list of visible root directories \cr
 \code{\link{get_raad_filenames}} \tab returns the entire list of all files found in visible root directories \cr
 \code{\link{run_build_raad_cache}} scan all root directories and update the file listing in each \tab \cr
 }

Options for use by administrators.

\tabular{ll}{
 \code{raadfiles.file.cache.disable } \tab disable on-load setting of the in-memory file cache (not set automatically) \cr
 \code{raadfiles.file.refresh.threshold } \tab threshold probability of how often to refresh in-memory file cache (0 = never, 1 = every time `get_raad_filenames()` is called) \cr
}

Options used internally, and subject to control by adminstrator options and the running of admin functions (they may not be set).
\tabular{ll}{
 \code{raadfiles.data.roots } \tab the list of paths to root directories \cr
 \code{raadfiles.filename.database} \tab the data frame of all file names from the data roots \cr
 \code{raadfiles.database.status} \tab a status record of the in-memory filename database (timestamp)\cr
 }
}
